import React, { useEffect, memo, Fragment } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { compose } from 'redux';
import { createStructuredSelector } from 'reselect';

import { useInjectReducer } from '../../utils/injectReducer';
import { useInjectSaga } from '../../utils/injectSaga';

import {
  {{#each entities}}
  {{pascalCase this}}
  {{/each}}
} from './components';

import reducers from './reducers';
import sagas from './sagas';

{{#each entities}}
import {
  fetch{{pascalCase this}},
  delete{{pascalCase this}},
  update{{pascalCase this}},
  create{{pascalCase this}}
} from './actions/{{camelCase this}}ActionCreator';

{{/each}}

export function {{pascalCase container}}Container(props) {

  useInjectReducer(reducers);
  useInjectSaga(sagas);

  useEffect(() => {
    
  }, []);

  return (
    <Fragment>
      {{#each entities}}
      <{{pascalCase this}} />
      {{/each}}
    </Fragment>
  );
}

{{pascalCase containerName}}Container.propTypes = {
  {{#each entities}}
  // {{pascalCase this}}
  onDelete{{pascalCase this}}: PropTypes.func,
  onUpdate{{pascalCase this}}: PropTypes.func,
  onCreate{{pascalCase this}}: PropTypes.func,
  onFetch{{pascalCase this}}: PropTypes.func,

  {{/each}}
};

const mapStateToProps = createStructuredSelector({

});

export function mapDispatchToProps(dispatch) {
  return {
    {{#each entities}}
    // {{pascalCase this}}
    onDelete{{pascalCase this}}: payload => dispatch(delete{{pascalCase this}}(payload)),
    onUpdate{{pascalCase this}}: payload => dispatch(update{{pascalCase this}}(payload)),
    onCreate{{pascalCase this}}: payload => dispatch(create{{pascalCase this}}(payload)),
    onFetch{{pascalCase this}}: payload => dispatch(fetch{{pascalCase this}}(payload)),

    {{/each}}
  };
}

const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps,
);

export default compose(
  withConnect,
  memo,
)({{pascalCase containerName}}Container);
