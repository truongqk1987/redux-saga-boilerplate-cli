import React, { useEffect, memo, Fragment } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { compose } from 'redux';
import { createStructuredSelector } from 'reselect';

import { useInjectReducer } from '../../utils/injectReducer';
import { useInjectSaga } from '../../utils/injectSaga';
import {
  //DEFINED_ENTITY_NAME_HERE
} from './components';
import reducers from './reducers';
import sagas from './sagas';

//DEFINED_ENTITY_ACTION_METHODS

export function {{pascalCase containerName}}Container(props) {

  useInjectReducer(reducers);
  useInjectSaga(sagas);

  useEffect(() => {
    
  }, []);

  return (
    <Fragment>
        {/*DEFINED_ENTITY_COMPONENT_HERE*/}
    </Fragment>
  );
}

{{pascalCase containerName}}Container.propTypes = {
    //DEFINED_ENTITY_ACTIONS_PROPTYPES
};

const mapStateToProps = createStructuredSelector({

});

export function mapDispatchToProps(dispatch) {
  return {
    //DEFINED_ENTITY_DISPATCH_PROPS
  };
}

const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps,
);

export default compose(
  withConnect,
  memo,
)({{pascalCase containerName}}Container);
